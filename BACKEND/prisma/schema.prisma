generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  SCHOOL_ORGANIZER
  ORGANIZER
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  LOCKED
}

enum FieldType {
  TEXT
  NUMBER
  SELECT
  RADIO
  CHECKBOX
  EMAIL
  TEL
  FILE
  IMAGE
}

enum PaymentMethod {
  MOMO
  OM
  CARD
  BANK
}
enum EventType{
  SCHOOL
  WEDDING
  FUNERAL
  BIRTHDAY
  CHARITY
  BUSINESS
  CONFERENCE
  CEREMONY
  CONCERT
  OTHER
}
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  profile  String?
  role     Role    @default(ORGANIZER)
  schoolId Int?
  school   School? @relation(fields: [schoolId], references: [id])

  events          Event[]
  receipts        Receipt[]
  notifications   Notification[]
  payoutConfigs   PayoutConfig[]
  transactionLogs TransactionLog[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model School {
  id       Int     @id @default(autoincrement())
  name     String
  address  String?
  logo     String?
  email    String  @unique
  city     String?
  code     String? // assigned by superadmin
  approved Boolean @default(false)

  admins User[]
  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  type           EventType
  status         EventStatus @default(PENDING)
  isLocked       Boolean     @default(false)
  date           DateTime?
  location       String?
  image          String?
  paymentMethods Json? 
  theme          Json?
  eventLink      String     @unique
  organizerId    Int
  schoolId       Int?
  organizer      User        @relation(fields: [organizerId], references: [id])
  school         School?     @relation(fields: [schoolId], references: [id])

  fields          EventField[]
  receipts        Receipt[]
  payments        Payment[]
  notifications   Notification[]
  transactionLogs TransactionLog[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([organizerId, eventLink])
}

model EventField {
  id           Int       @id @default(autoincrement())
  eventId      Int
  label        String
  fieldType    FieldType
  required     Boolean   @default(true)
  readOnly     Boolean   @default(false)
  defaultValue String?
  options      Json?
  min          Int?
  max          Int?
  fixedValue   Boolean?  @default(false)
  conditional  Json?

  event Event @relation(fields: [eventId], references: [id])
}

model Payment {
  id      Int           @id @default(autoincrement())
  answers Json // dynamic responses
  amount  Float
  method  PaymentMethod
  status  PaymentStatus @default(PENDING)

  eventId Int
  event   Event    @relation(fields: [eventId], references: [id])
  receipt Receipt?

  createdAt DateTime @default(now())
}

model Receipt {
  id          Int      @id @default(autoincrement())
  receiptData Json
  qrCode      String?
  paidAt      DateTime

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  contributorId Int
  contributor   User @relation(fields: [contributorId], references: [id])

  contributionId Int?     @unique
  contribution   Payment? @relation(fields: [contributionId], references: [id])

  customFields Json
  schoolName   String
  schoolLogo   String?
  eventTitle   String
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  eventId Int?
  event   Event? @relation(fields: [eventId], references: [id])
}

model PayoutConfig {
  id          Int      @id @default(autoincrement())
  organizerId Int
  organizer   User     @relation(fields: [organizerId], references: [id])
  type        String // WALLET, BANK, MOMO, OM
  accountInfo Json
  createdAt   DateTime @default(now())
}

model TransactionLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  eventId   Int?
  event     Event?   @relation(fields: [eventId], references: [id])
  action    String
  details   Json?
  createdAt DateTime @default(now())
}
